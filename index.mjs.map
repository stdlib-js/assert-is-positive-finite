{"version":3,"file":"index.mjs","sources":["../lib/primitive.js","../lib/object.js","../lib/main.js","../lib/index.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport { isPrimitive as isNumber } from '@stdlib/assert-is-number';\nimport { isPrimitive as isInfinitePrimitive } from '@stdlib/assert-is-infinite';\n\n\n// MAIN //\n\n/**\n* Tests if a value is a number primitive having a non-infinite positive value.\n*\n* @param {*} value - value to test\n* @returns {boolean} boolean indicating if a value is a number primitive having a non-infinite positive value\n*\n* @example\n* var bool = isPositiveFinite( 3.0 );\n* // returns true\n*\n* @example\n* var bool = isPositiveFinite( 3.0/0.0 );\n* // returns false\n*\n* @example\n* var bool = isPositiveFinite( new Number( 3.0 ) );\n* // returns false\n*/\nfunction isPositiveFinite( value ) {\n\treturn (\n\t\tisNumber( value ) &&\n\t\tvalue > 0.0 && !isInfinitePrimitive( value )\n\t);\n}\n\n\n// EXPORTS //\n\nexport default isPositiveFinite;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport { isObject as isNumber } from '@stdlib/assert-is-number';\nimport { isObject as isInfiniteObject } from '@stdlib/assert-is-infinite';\n\n\n// MAIN //\n\n/**\n* Tests if a value is a number object having a non-infinite positive value.\n*\n* @param {*} value - value to test\n* @returns {boolean} boolean indicating if a value is a number object having a non-infinite positive value\n*\n* @example\n* var bool = isPositiveFinite( 3.0 );\n* // returns false\n*\n* @example\n* var bool = isPositiveFinite( new Number( 3.0 ) );\n* // returns true\n*\n* @example\n* var bool = isPositiveFinite( new Number( 1.0/0.0 ) );\n* // returns false\n*/\nfunction isPositiveFinite( value ) {\n\treturn (\n\t\tisNumber( value ) && value.valueOf() > 0.0 && !isInfiniteObject( value )\n\t);\n}\n\n\n// EXPORTS //\n\nexport default isPositiveFinite;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isPrimitiveFinite from './primitive.js';\nimport isObjectFinite from './object.js';\n\n\n// MAIN //\n\n/**\n* Tests if a value is a non-infinite positive number.\n*\n* @param {*} value - value to test\n* @returns {boolean} boolean indicating whether value is a non-infinite positive number\n*\n* @example\n* var bool = isPositiveFinite( 5.0 );\n* // returns true\n*\n* @example\n* var bool = isPositiveFinite( new Number( 5.0 ) );\n* // returns true\n*\n* @example\n* var bool = isPositiveFinite( -5.0 );\n* // returns false\n*\n* @example\n* var bool = isPositiveFinite( new Number( 5.0 )/0.0 );\n* // returns false\n*\n* @example\n* var bool = isPositiveFinite( null );\n* // returns false\n*/\nfunction isPositiveFinite( value ) {\n\treturn ( isPrimitiveFinite( value ) || isObjectFinite( value ) );\n}\n\n\n// EXPORTS //\n\nexport default isPositiveFinite;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Test if a value is a non-infinite positive number.\n*\n* @module @stdlib/assert-is-positive-finite\n*\n* @example\n* import isPositiveFinite from '@stdlib/assert-is-positive-finite';\n*\n* var bool = isPositiveFinite( 5.0 );\n* // returns true\n*\n* bool = isPositiveFinite( new Number( 5.0 ) );\n* // returns true\n*\n* bool = isPositiveFinite( 3.14 );\n* // returns true\n*\n* bool = isPositiveFinite( new Number( 5.0/0.0 ) );\n* // returns false\n*\n* bool = isPositiveFinite( -5.0 );\n* // returns false\n*\n* bool = isPositiveFinite( -5.0/0.0 );\n* // returns false\n*\n* bool = isPositiveFinite( null );\n* // returns false\n*\n* @example\n* import { isPrimitive as isPositiveFinite } from '@stdlib/assert-is-positive-finite';\n*\n* var bool = isPositiveFinite( 3.0 );\n* // returns true\n*\n* bool = isPositiveFinite( new Number( 3.0 ) );\n* // returns false\n*\n* @example\n* import { isObject as isPositiveFinite } from '@stdlib/assert-is-positive-finite';\n*\n* var bool = isPositiveFinite( 3.0 );\n* // returns false\n*\n* bool = isPositiveFinite( new Number( 3.0 ) );\n* // returns true\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport main from './main.js';\nimport isPrimitive from './primitive.js';\nimport isObject from './object.js';\n\n\n// MAIN //\n\nsetReadOnly( main, 'isPrimitive', isPrimitive );\nsetReadOnly( main, 'isObject', isObject );\n\n\n// EXPORTS //\n\nexport default main;\n"],"names":["isPositiveFinite","value","isNumber","isInfinitePrimitive","valueOf","isInfiniteObject","isPrimitiveFinite","isObjectFinite","setReadOnly","main","isPrimitive","isObject"],"mappings":";;0WA8CA,SAASA,EAAkBC,GAC1B,OACCC,EAAUD,IACVA,EAAQ,IAAQE,EAAqBF,EAEvC,CCLA,SAASD,EAAkBC,GAC1B,OACCC,EAAUD,IAAWA,EAAMG,UAAY,IAAQC,EAAkBJ,EAEnE,CCIA,SAASD,EAAkBC,GAC1B,OAASK,EAAmBL,IAAWM,EAAgBN,EACxD,CCsBAO,EAAAC,EAAA,cAAAC,GACAF,EAAAC,EAAA,WAAAE"}