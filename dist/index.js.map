{
  "version": 3,
  "sources": ["../lib/primitive.js", "../lib/object.js", "../lib/main.js", "../lib/index.js"],
  "sourcesContent": ["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isNumber = require( '@stdlib/assert-is-number' ).isPrimitive;\nvar isInfinitePrimitive = require( '@stdlib/assert-is-infinite').isPrimitive;\n\n\n// MAIN //\n\n/**\n* Tests if a value is a number primitive having a non-infinite positive value.\n*\n* @param {*} value - value to test\n* @returns {boolean} boolean indicating if a value is a number primitive having a non-infinite positive value\n*\n* @example\n* var bool = isPositiveFinite( 3.0 );\n* // returns true\n*\n* @example\n* var bool = isPositiveFinite( 3.0/0.0 );\n* // returns false\n*\n* @example\n* var bool = isPositiveFinite( new Number( 3.0 ) );\n* // returns false\n*/\nfunction isPositiveFinite( value ) {\n\treturn (\n\t\tisNumber( value ) &&\n\t\tvalue > 0.0 && !isInfinitePrimitive( value )\n\t);\n}\n\n\n// EXPORTS //\n\nmodule.exports = isPositiveFinite;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isNumber = require( '@stdlib/assert-is-number' ).isObject;\nvar isInfiniteObject = require( '@stdlib/assert-is-infinite' ).isObject;\n\n\n// MAIN //\n\n/**\n* Tests if a value is a number object having a non-infinite positive value.\n*\n* @param {*} value - value to test\n* @returns {boolean} boolean indicating if a value is a number object having a non-infinite positive value\n*\n* @example\n* var bool = isPositiveFinite( 3.0 );\n* // returns false\n*\n* @example\n* var bool = isPositiveFinite( new Number( 3.0 ) );\n* // returns true\n*\n* @example\n* var bool = isPositiveFinite( new Number( 1.0/0.0 ) );\n* // returns false\n*/\nfunction isPositiveFinite( value ) {\n\treturn (\n\t\tisNumber( value ) && value.valueOf() > 0.0 && !isInfiniteObject( value )\n\t);\n}\n\n\n// EXPORTS //\n\nmodule.exports = isPositiveFinite;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isPrimitiveFinite = require( './primitive.js' );\nvar isObjectFinite = require( './object.js' );\n\n\n// MAIN //\n\n/**\n* Tests if a value is a non-infinite positive number.\n*\n* @param {*} value - value to test\n* @returns {boolean} boolean indicating whether value is a non-infinite positive number\n*\n* @example\n* var bool = isPositiveFinite( 5.0 );\n* // returns true\n*\n* @example\n* var bool = isPositiveFinite( new Number( 5.0 ) );\n* // returns true\n*\n* @example\n* var bool = isPositiveFinite( -5.0 );\n* // returns false\n*\n* @example\n* var bool = isPositiveFinite( new Number( 5.0 )/0.0 );\n* // returns false\n*\n* @example\n* var bool = isPositiveFinite( null );\n* // returns false\n*/\nfunction isPositiveFinite( value ) {\n\treturn ( isPrimitiveFinite( value ) || isObjectFinite( value ) );\n}\n\n\n// EXPORTS //\n\nmodule.exports = isPositiveFinite;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Test if a value is a non-infinite positive number.\n*\n* @module @stdlib/assert-is-positive-finite\n*\n* @example\n* var isPositiveFinite = require( '@stdlib/assert-is-positive-finite' );\n*\n* var bool = isPositiveFinite( 5.0 );\n* // returns true\n*\n* bool = isPositiveFinite( new Number( 5.0 ) );\n* // returns true\n*\n* bool = isPositiveFinite( 3.14 );\n* // returns true\n*\n* bool = isPositiveFinite( new Number( 5.0/0.0 ) );\n* // returns false\n*\n* bool = isPositiveFinite( -5.0 );\n* // returns false\n*\n* bool = isPositiveFinite( -5.0/0.0 );\n* // returns false\n*\n* bool = isPositiveFinite( null );\n* // returns false\n*\n* @example\n* var isPositiveFinite = require( '@stdlib/assert-is-positive-finite' ).isPrimitive;\n*\n* var bool = isPositiveFinite( 3.0 );\n* // returns true\n*\n* bool = isPositiveFinite( new Number( 3.0 ) );\n* // returns false\n*\n* @example\n* var isPositiveFinite = require( '@stdlib/assert-is-positive-finite' ).isObject;\n*\n* var bool = isPositiveFinite( 3.0 );\n* // returns false\n*\n* bool = isPositiveFinite( new Number( 3.0 ) );\n* // returns true\n*/\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils-define-nonenumerable-read-only-property' );\nvar main = require( './main.js' );\nvar isPrimitive = require( './primitive.js' );\nvar isObject = require( './object.js' );\n\n\n// MAIN //\n\nsetReadOnly( main, 'isPrimitive', isPrimitive );\nsetReadOnly( main, 'isObject', isObject );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n"],
  "mappings": "uGAAA,IAAAA,EAAAC,EAAA,SAAAC,EAAAC,EAAA,cAsBA,IAAIC,EAAW,QAAS,0BAA2B,EAAE,YACjDC,EAAsB,QAAS,4BAA4B,EAAE,YAuBjE,SAASC,EAAkBC,EAAQ,CAClC,OACCH,EAAUG,CAAM,GAChBA,EAAQ,GAAO,CAACF,EAAqBE,CAAM,CAE7C,CAKAJ,EAAO,QAAUG,ICxDjB,IAAAE,EAAAC,EAAA,SAAAC,EAAAC,EAAA,cAsBA,IAAIC,EAAW,QAAS,0BAA2B,EAAE,SACjDC,EAAmB,QAAS,4BAA6B,EAAE,SAuB/D,SAASC,EAAkBC,EAAQ,CAClC,OACCH,EAAUG,CAAM,GAAKA,EAAM,QAAQ,EAAI,GAAO,CAACF,EAAkBE,CAAM,CAEzE,CAKAJ,EAAO,QAAUG,ICvDjB,IAAAE,EAAAC,EAAA,SAAAC,EAAAC,EAAA,cAsBA,IAAIC,EAAoB,IACpBC,EAAiB,IA+BrB,SAASC,EAAkBC,EAAQ,CAClC,OAASH,EAAmBG,CAAM,GAAKF,EAAgBE,CAAM,CAC9D,CAKAJ,EAAO,QAAUG,ICSjB,IAAIE,EAAc,QAAS,uDAAwD,EAC/EC,EAAO,IACPC,EAAc,IACdC,EAAW,IAKfH,EAAaC,EAAM,cAAeC,CAAY,EAC9CF,EAAaC,EAAM,WAAYE,CAAS,EAKxC,OAAO,QAAUF",
  "names": ["require_primitive", "__commonJSMin", "exports", "module", "isNumber", "isInfinitePrimitive", "isPositiveFinite", "value", "require_object", "__commonJSMin", "exports", "module", "isNumber", "isInfiniteObject", "isPositiveFinite", "value", "require_main", "__commonJSMin", "exports", "module", "isPrimitiveFinite", "isObjectFinite", "isPositiveFinite", "value", "setReadOnly", "main", "isPrimitive", "isObject"]
}
